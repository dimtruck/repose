import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.ajoberstar.grgit.Grgit
import org.scoverage.ScoverageAggregate

import java.nio.file.Files
import java.nio.file.Paths
import java.text.SimpleDateFormat

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.openrepose.gradle.plugins.linkchecker'

dependencies {
    asciidoctor 'org.asciidoctor:asciidoctorj-diagram'
}

task aggregateScoverage(type: ScoverageAggregate)

checkScoverage {
    reportDir = file("$buildDir/scoverage-aggregate")
}

task copyXsds(type: Copy) {
    // Copy the Repose Core configuration schemas.
    from("${project.projectDir}/core/repose-core-api/src/main/resources/META-INF/schema/container/container-configuration.xsd")
    from("${project.projectDir}/core/repose-core-api/src/main/resources/META-INF/schema/metrics/metrics.xsd")
    from("${project.projectDir}/core/repose-core-api/src/main/resources/META-INF/schema/system-model/system-model.xsd")

    // Copy all filter and service configuration schemas.
    from(fileTree("${project.projectDir}/components").include('**/src/main/resources/META-INF/schema/config/*.xsd').files)
    // Copy all datastore service configuration schemas.
    from(fileTree("${project.projectDir}/components").include('**/src/main/resources/META-INF/schema/*-datastore/*.xsd').files)

    // Place all schemas into a schemas directory.
    into("${project.buildDir}/asciidoc/html5/schemas/")
}

task copyUbuntuDockerfile(type: Copy) {
    // Copy the Repose Ubuntu Dockerfile.
    from("${project.projectDir}/artifacts/docker/src/docker/ubuntu/Dockerfile")

    // Place the file into a resources subdirectory.
    into("${project.buildDir}/asciidoc/html5/resources/ubuntu/")

}

task copyCentosDockerfile(type: Copy) {
    // Copy the Repose CentOS Dockerfile.
    from("${project.projectDir}/artifacts/docker/src/docker/centos/Dockerfile")

    // Place the file into a resources subdirectory.
    into("${project.buildDir}/asciidoc/html5/resources/centos/")
}

asciidoctor {
    requires 'asciidoctor-diagram'
    options template_dirs: ["${project.projectDir}/src/docs/asciidoc/_backends/haml"]
    attributes 'source-highlighter': 'coderay',
               'stylesdir': "${project.projectDir}/src/docs/asciidoc/_stylesheets",
               'stylesheet': 'repose.css',
               'toc': 'left',
               'icons': 'font',
               'docinfo': 'shared',
               'sectanchors': ''

    resources {
        from 'src/docs/resources'

        into '.'
    }

    ext.capturedOutput = [ ]
    def listener = { ext.capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        ext.capturedOutput.join('').with { output ->
            if (output =~ /WARNING:/ || output =~ /ERROR:/) {
                throw new RuntimeException("See output above for specific cause of failure(s).")
            }
        }
    }
}

linkchecker {
    startFileName = "$buildDir/asciidoc/html5"
    httpURLConnectionTimeout = 1000
    ignoreHostRegexs = [
        /one\.rackspace\.com/,      // Prevents an infinite loop issue.
        /openrepose\.org/,          // Prevents a false positive.
        /repose\.atlassian\.net/,   // Saves ~30 secs.
    ]
}

task('publishDocs', dependsOn: asciidoctor, group: 'release', description: 'Adds the new version of the docs to github pages') {
    doLast {
        def workingDir = project.file("${project.buildDir}/gh-pages")

        workingDir.deleteDir()

        def repo = Grgit.clone(
            uri: 'git@github.com:rackerlabs/repose.git',
            refToCheckout: 'gh-pages',
            dir: workingDir,
        )

        // Amend the versions list
        def versionsFile = project.file("${project.buildDir}/gh-pages/_includes/versions.json")
        def versionsJson = new JsonSlurper().parse(versionsFile)
        def modifiedVersions = versionsJson.versions.collect { new Version(id: it.id, released: it.released) }
        def newVersionIndex = modifiedVersions.findIndexOf { compareVersions(String.valueOf(version), it.id) > 0 }
        def date = new SimpleDateFormat('yyyy-MM-dd').format(new Date())
        newVersionIndex = newVersionIndex == -1 ? modifiedVersions.size() : newVersionIndex
        modifiedVersions.add(newVersionIndex, new Version(id: String.valueOf(version), released: date))

        // Write the versions list as JSON
        def jsonWriter = new PrintWriter(versionsFile.newWriter())
        jsonWriter.println(JsonOutput.prettyPrint(JsonOutput.toJson(versions: modifiedVersions)))
        jsonWriter.close()

        // Write the versions includes file
        def includesWriter = new PrintWriter(project.file("${project.buildDir}/gh-pages/_includes/versions.html"))
        includesWriter.println("""<li><a href="./versions/latest/index.html">Latest</a></li>""")
        modifiedVersions.forEach { Version v ->
            includesWriter.println("""<li><a href="./versions/${v.id}/index.html">v${v.id} - ${v.released}</a></li>""")
        }
        includesWriter.println("""<li><a href="http://wiki.openrepose.org">Legacy Wiki Docs</a></li>""")
        includesWriter.close()

        // Update the latest link, if applicable
        def latestLinkPath = project.buildDir.toPath().resolve(Paths.get('gh-pages', 'versions', 'latest'))
        if (newVersionIndex == 0) {
            Files.deleteIfExists(latestLinkPath)
            Files.createSymbolicLink(latestLinkPath, Paths.get(String.valueOf(version)))
        }

        copy {
            from "${asciidoctor.outputDir}/html5"
            into "${project.buildDir}/gh-pages/versions/$version"
        }

        repo.with {
            add(patterns: ['.'])
            commit(message: "Adding documentation for $version")
            push()
        }
    }
}

if (project.hasProperty("minCoverageRatio")) {
    aggregateScoverage.dependsOn reportScoverage, subprojects.reportScoverage
    checkScoverage.dependsOn aggregateScoverage
    check.dependsOn checkScoverage
}

asciidoctor.dependsOn copyXsds
asciidoctor.dependsOn copyUbuntuDockerfile
asciidoctor.dependsOn copyCentosDockerfile
build.dependsOn asciidoctor
tasks.linkchecker.dependsOn asciidoctor
check.dependsOn tasks.linkchecker
publishDocs.dependsOn project.tasks.getByPath(':buildAll')
project.tasks.getByPath(':release').dependsOn publishDocs

/**
 * @return -1 if v1 is a lower version than v2, 0 if they are equal, and 1 if v1 is a greater version than v2
 */
int compareVersions(String v1, String v2) {
    List<String> v1Parts = v1.tokenize('.')
    List<String> v2Parts = v2.tokenize('.')

    int minLen = Math.min(v1Parts.size(), v2Parts.size())

    // Compare each number from the versions until either the numbers do not match,
    // or the end of a version string is hit.
    for (int i = 0; i < minLen; ++i) {
        int n1 = v1Parts[i] as int
        int n2 = v2Parts[i] as int

        if (n1 != n2) {
            return n1 <=> n2
        }
    }

    // If we got this far, then one version is a substring of the other.
    // Therefore, whichever version is longer is the greater version.
    return v1Parts.size() <=> v2Parts.size()
}

boolean isLatestVersion(String version, List<String> otherVersions) {
    return !otherVersions.any {
        it ==~ /(\d+\.)*\d+/ && compareVersions(version, it) < 0
    }
}

class Version {
    String id
    String released
}
